@page "/"
@using BlazorMonacoEditor.Services
@using BlazorMonacoEditor.Roslyn.Scaffolding
@inject IMonacoInterop MonacoInterop
@inject IndexViewModel DataContext

<div class="m-2">
    <div class=" d-flex my-1 gap-1">
        <div class="input-group">
            <input type="checkbox" id="isVisible" @bind="@DataContext.IsVisible"/>
            <label for="isVisible" class="col-form-label mx-1">Is Visible</label>
        </div>

        <div class="input-group">
            <input type="checkbox" id="showLineNumbers" @bind="@DataContext.ShowLineNumbers"/>
            <label for="showLineNumbers" class="col-form-label mx-1">Show Line Numbers</label>
        </div>

        <div class="input-group">
            <input type="checkbox" id="showMap" @bind="@DataContext.ShowCodeMap"/>
            <label for="showMap" class="col-form-label mx-1">Show Map</label>
        </div>


        <div class="input-group">
            <select @bind="@DataContext.DocumentIdAsString"
                    class="form-control flex-shrink-1">
                @foreach (var documentId in DataContext.Documents)
                {
                    <option value="@(DocumentIdTypeConverter.Instance.ConvertToString(documentId))">
                        @documentId
                    </option>
                }
            </select>
            <button id="addDocument" onclick="@(async () => { DataContext.DocumentId = DataContext.AddDocument().Id; })">Add</button>
        </div>

        <select @bind="@DataContext.Theme"
                class="form-control flex-shrink-1">
            @foreach (var theme in DataContext.KnownThemes)
            {
                <option value="@theme">
                    @theme
                </option>
            }
        </select>

        <select @bind="@DataContext.LanguageId"
                class="form-control flex-shrink-1">
            @foreach (var languageId in DataContext.KnownLanguages)
            {
                <option value="@languageId">
                    @languageId
                </option>
            }
        </select>

        <div class="flex-grow-1"></div>
    </div>

    <textarea class="w-100" rows="4" readonly>@(DataContext.SourceCode.ToString())</textarea>
</div>

@if (DataContext.IsVisible)
{
    <MonacoEditor Theme="@DataContext.Theme"
                  @bind-LanguageId="@DataContext.LanguageId"
                  ShowLineNumbers="@DataContext.ShowLineNumbers"
                  ShowCodeMap="@DataContext.ShowCodeMap"
                  TextModel="@DataContext.TextModel"
                  />
}

@code{


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            await DataContext.RoslynCompletionProviderController.Register();
        }
    }

}