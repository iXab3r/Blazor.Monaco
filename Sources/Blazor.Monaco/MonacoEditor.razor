@inject MonacoInterop MonacoInterop
@inject ILogger<MonacoEditor> Logger

<div @ref="monacoContainer" class="monaco-editor-container"></div>

@code {
  private ElementReference monacoContainer;
  private CodeEditor editor;
  private TextModel currentTextModel;
  private Uri lastUri;
  private IEnumerable<MarkerData> currentMarkers;

  [Parameter]
  public Uri Uri { get; set; }

  [Parameter]
  public string Value { get; set; }

  [Parameter]
  public string LanguageId { get; set; }

  [Parameter]
  public EventCallback<TextModel> OnModelChanged { get; set; }

  [Parameter]
  public IEnumerable<MarkerData> ModelMarkers { get; set; }

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
      if (firstRender)
      {
          Logger.LogDebug("First Render");
            
          // On the first render, we'll ask our MonacoInterop class to create
          // an editor in the specified container element.
          editor = await MonacoInterop.CreateEditor(monacoContainer);

          Logger.LogDebug("Editor Created");

          // Other state changes may have happened by the time we reach this
          // point, so we'll set the model if there is one.
          if(currentTextModel is object)
          {
              await editor.SetModel(currentTextModel);
          }
      }
  }

  protected override async Task OnParametersSetAsync()
  {
      // Only change the loaded model if the file URI is different.
      if(Uri != lastUri)
      {
          Logger.LogDebug("Changing Model");
          lastUri = Uri;

          if (currentTextModel is object)
          {
              // Detach events.
              currentTextModel.OnModelChanged -= ModelChangedHandler;
          }

          // Completely new model; create one.
          currentTextModel = await MonacoInterop.CreateTextModel(Uri, Value, LanguageId);

          // Attach events.
          currentTextModel.OnModelChanged += ModelChangedHandler;

          if(editor is object)
          {
              await editor.SetModel(currentTextModel);
          }

          if(ModelMarkers != null)
          {
              currentMarkers = ModelMarkers;
              await currentTextModel.SetMarkers(null, currentMarkers);
          }
      }
      else if(currentTextModel is object)
      {
          // Change the model content.
          if(Value != currentTextModel.InitialValue)
          {
              await currentTextModel.SetContent(Value);
          }

          if(currentMarkers != ModelMarkers)
          {
              Logger.LogDebug("Markers Changing");
              currentMarkers = ModelMarkers;
              await currentTextModel.SetMarkers(null, currentMarkers);
          }
      }
  }

  private void ModelChangedHandler(object textModel, string newValue)
  {
      // Make sure the event is still relevant.
      if(ReferenceEquals(textModel, currentTextModel))
      {
          OnModelChanged.InvokeAsync(currentTextModel);
      }
  }
}